------------------------------------------------------------------------------

-----------------------------------------------------------------------------
-- Entity: 	spipeline_slice
-- File:	spipeline_slice.vhd
-- Author:	Zhimin Chen, SES, Virginia Tech
-- Description:	a slice of the 5-stage secure pipeline
------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library grlib;
use grlib.sparc.all;
use grlib.stdlib.all;
library techmap;
use techmap.gencomp.all;
library gaisler;
use gaisler.leon3.all;
use gaisler.libiu.all;
use gaisler.arith.all;
-- use gaisler.libproc3.all;
-- pragma translate_off
use grlib.sparc_disas.all;
-- pragma translate_on

entity spipeline_slice is
  generic (
    nwindows  : integer range 2 to 32 := 8;
    memtech   : integer range 0 to NTECH  := DEFMEMTECH
    );
  port (
    clk   : in  std_ulogic;
    rstn  : in  std_ulogic;
    holdn : in  std_ulogic;
    rfi   : in  iregfile_slice_in_type;
    rfo   : out iregfile_slice_out_type;
    rsel1 : in  std_logic_vector(2 downto 0);
    rsel2 : in  std_logic_vector(2 downto 0);
    imm   : in  std_logic_vector(0 downto 0);
    aluop : in  std_logic_vector(2 downto 0);
    alusel: in  std_logic_vector(1 downto 0);
    shleft: in  std_ulogic;
    shcnt : in  std_logic_vector(4 downto 0);
    sari  : in  std_ulogic;
    smode : in  std_ulogic;
    swreg : in  std_ulogic;
    shlin : in  std_logic_vector(30 downto 0);
    shrin : in  std_logic_vector(30 downto 0);
    shlout: out std_logic_vector(30 downto 0);
    shrout: out std_logic_vector(30 downto 0);
    rout  : out sreg;
    srd   : in  std_ulogic;
	 op1   : out std_ulogic;
	 op2   : out std_ulogic;
	 andi  : in  std_logic_vector(0 downto 0);
	 ori   : in  std_logic_vector(0 downto 0)
    );
end;

architecture rtl of spipeline_slice is

  constant wslice    : integer range 1 to 32 := 1;
  -- constant NWINDOWS  : integer range 2 to 32 := 8;
  constant IRFBITS  : integer range 6 to 10 := log2(NWINDOWS+1) + 4;
  constant IRFWT     : integer := 1;--regfile_3p_write_through(memtech);
  constant IREGNUM  : integer := NWINDOWS * 16 + 8;
  
  constant EXE_AND   : std_logic_vector(2 downto 0) := "000";
  constant EXE_XOR   : std_logic_vector(2 downto 0) := "001"; -- must be equal to EXE_PASS2
  constant EXE_OR    : std_logic_vector(2 downto 0) := "010";
  constant EXE_XNOR  : std_logic_vector(2 downto 0) := "011";
  constant EXE_ANDN  : std_logic_vector(2 downto 0) := "100";
  constant EXE_ORN   : std_logic_vector(2 downto 0) := "101";
  constant EXE_DIV   : std_logic_vector(2 downto 0) := "110";
  
  constant EXE_PASS2   : std_logic_vector(2 downto 0) := "001"; 
  
  constant EXE_RES_SHIFT : std_logic_vector(1 downto 0) := "01";
  constant EXE_RES_LOGIC : std_logic_vector(1 downto 0) := "10";
  

  signal r : sreg;
  signal rin   : sreg;
  signal srfi  : iregfile_slice_in_type;
  signal srfo  : iregfile_slice_out_type;
  signal wdata : std_logic_vector(wslice-1 downto 0);
   
  
  procedure shift(aluin1  : in std_logic_vector(wslice-1 downto 0);
	         shleft   : in std_ulogic; 
	         shiftcnt : in std_logic_vector(4 downto 0); 
	         sari     : in std_ulogic;
	         shift_out: out std_logic_vector(wslice-1 downto 0);
	         shlin    : in std_logic_vector(30 downto 0);
	         shrin    : in std_logic_vector(30 downto 0);
	         shlout   : out std_logic_vector(30 downto 0);
	         shrout   : out std_logic_vector(30 downto 0)) is
    variable shiftin : std_logic_vector(31 downto 0);
    variable zero_32 : std_logic_vector(31 downto 0);
    variable shstage1: std_logic_vector(15 downto 0);
    variable shstage2: std_logic_vector(7 downto 0);
    variable shstage3: std_logic_vector(3 downto 0);
    variable shstage4: std_logic_vector(1 downto 0);
    variable shcnt   : std_logic_vector(4 downto 0);
  begin
    shlout := aluin1 & shlin(30 downto 1);
    shrout := shrin(29 downto 0) & aluin1;
    if shleft = '1' then
      shiftin(31 downto 0) := aluin1 & shlin;
      shcnt := not(shiftcnt);
    else
      shiftin(31 downto 0) := shrin & aluin1;
      shcnt := shiftcnt;
    end if;
    
    if shleft = '1' then
      if shcnt(4) = '1' then shstage1  := shiftin(15 downto 0); 
      else shstage1  := shiftin(31 downto 16); end if;
      if shcnt(3) = '1' then shstage2  := shstage1(7 downto 0); 
      else shstage2  := shstage1(15 downto 8); end if;
      if shcnt(2) = '1' then shstage3  := shstage2(3 downto 0); 
      else shstage3  := shstage2(7 downto 4); end if;
      if shcnt(1) = '1' then shstage4  := shstage3(1 downto 0); 
      else shstage4  := shstage3(3 downto 2); end if;
      if shcnt(0) = '1' then shift_out := shstage4(0 downto 0); 
      else shift_out := shstage4(1 downto 1); end if;
    else
      if shcnt(4) = '0' then shstage1  := shiftin(15 downto 0); 
      else shstage1  := shiftin(31 downto 16); end if;
      if shcnt(3) = '0' then shstage2  := shstage1(7 downto 0); 
      else shstage2  := shstage1(15 downto 8); end if;
      if shcnt(2) = '0' then shstage3  := shstage2(3 downto 0); 
      else shstage3  := shstage2(7 downto 4); end if;
      if shcnt(1) = '0' then shstage4  := shstage3(1 downto 0); 
      else shstage4  := shstage3(3 downto 2); end if;
      if shcnt(0) = '0' then shift_out := shstage4(0 downto 0); 
      else shift_out := shstage4(1 downto 1); end if;
    end if;
  end;
  
  procedure logic_op(aluop : in std_logic_vector(2 downto 0); 
                    aluin1, aluin2 : in std_logic_vector(wslice-1 downto 0);
                    logicout : out std_logic_vector(wslice-1 downto 0);
						  andi, ori : in std_logic_vector(wslice-1 downto 0)) is
  begin
    case aluop is
    when EXE_AND   => logicout(0) := aluin1(0) and aluin2(0);
    when EXE_ANDN  => logicout(0) := andi(0);-- aluin1 and not aluin2;
    when EXE_OR    => logicout(0) := aluin1(0) or aluin2(0);
    when EXE_ORN   => logicout(0) := ori(0); -- aluin1 or not aluin2;
    when EXE_XOR   => logicout(0) := aluin1(0) xor aluin2(0);
    when EXE_XNOR  => logicout(0) := aluin1(0) xor not aluin2(0);
    when others => logicout := (others => '-');
    end case;
  end;
  
  procedure misc_op(aluop : in std_logic_vector(2 downto 0);
                    aluin2 : in std_logic_vector(wslice-1 downto 0);
                    misc_result : out std_logic_vector(wslice-1 downto 0)) is
  begin
    case aluop is
    when EXE_PASS2 => misc_result := aluin2;
    when others => misc_result := (others => '0');
    end case;
  end;
  
  procedure alu_select(alusel : in std_logic_vector(1 downto 0); 
                      shift_result, logic_result, misc_result : in std_logic_vector(wslice-1 downto 0);
                      alu_result : out std_logic_vector(wslice-1 downto 0)) is
  begin
    case alusel is
    when EXE_RES_SHIFT => alu_result := shift_result;
    when EXE_RES_LOGIC => alu_result := logic_result;
    when others => alu_result := misc_result;
    end case;
  end;
  
  procedure op_mux(imm, srf_data : in std_logic_vector(wslice-1 downto 0); 
                   v, r : in sreg; 
                   rsel : in std_logic_vector(2 downto 0);
                   d : out std_logic_vector(wslice-1 downto 0)) is
  begin
    case rsel is
    when "000" => d := srf_data;
    when "001" => d := v.m_result;
    when "010" => d := r.m_result;
    when "011" => d := r.x_result;
    when "100" => d := imm;
    when "101" => d := (others => '0');
    when "110" => d := r.w_result;
    when others => d := (others => '0');
    end case;
  end;
  
  component sregfile
  generic (tech : integer := 0; abits : integer := 6; dbits : integer := 32;
           wrfst : integer := 0; numregs : integer := 40);
  port (
    wclk   : in  std_ulogic;
    waddr  : in  std_logic_vector((abits -1) downto 0);
    wdata  : in  std_logic_vector((dbits -1) downto 0);
    we     : in  std_ulogic;
    rclk   : in  std_ulogic;
    raddr1 : in  std_logic_vector((abits -1) downto 0);
    re1    : in  std_ulogic;
    rdata1 : out std_logic_vector((dbits -1) downto 0);
    raddr2 : in  std_logic_vector((abits -1) downto 0);
    re2    : in  std_ulogic;
    rdata2 : out std_logic_vector((dbits -1) downto 0)
  );
  end component;
  
begin
  op1 <= r.e_op1(0);
  op2 <= r.e_op2(0);
-- secure register file
  srf0 : sregfile generic map (memtech, IRFBITS, 1, IRFWT, IREGNUM)
    port map (clk, srfi.waddr(IRFBITS-1 downto 0), srfi.wdata, srfi.wren, 
	      clk, srfi.raddr1(IRFBITS-1 downto 0), srfi.ren1, srfo.data1, 
	      srfi.raddr2(IRFBITS-1 downto 0), srfi.ren2, srfo.data2);

  regfile : process(rfi, wdata, swreg, srfo, smode, srd)
  begin
    srfi.raddr1 <= rfi.raddr1;
    srfi.raddr2 <= rfi.raddr2;
    srfi.waddr <= rfi.waddr;
    srfi.wdata <= wdata;
    srfi.ren1 <= rfi.ren1 and smode;
    srfi.ren2 <= rfi.ren2 and smode;
    srfi.wren <= swreg or (rfi.wren and smode);
    srfi.diag <= rfi.diag;
    if srd = '1' then
      rfo <= srfo;
    else
      rfo.data1 <= "0";
      rfo.data2 <= "0";
    end if;
  end process;

  pipeline : process(r, shleft, shcnt, sari, aluop, alusel, imm, rsel1, rsel2, srfo, swreg, rfi, shlin, shrin)
    variable v 	: sreg;
    variable shift_result : std_logic_vector(wslice-1 downto 0);
    variable logic_result : std_logic_vector(wslice-1 downto 0);
    variable misc_result  : std_logic_vector(wslice-1 downto 0);
    variable zero_v : std_logic_vector(wslice-1 downto 0);    
    --variable shl_in: std_logic_vector(30 downto 0);
    --variable shr_in: std_logic_vector(30 downto 0);
    variable shl_out: std_logic_vector(30 downto 0);
    variable shr_out: std_logic_vector(30 downto 0);
    
  begin
    v := r;
    zero_v := (others => '0');
    
----------------------------------------------------------------------------
-- EXCEPTION STAGE
----------------------------------------------------------------------------
    v.w_result := r.x_result;

----------------------------------------------------------------------------
-- MEMORY STAGE
----------------------------------------------------------------------------
    v.x_result := r.m_result;

----------------------------------------------------------------------------
-- EXCUTION STAGE
----------------------------------------------------------------------------
    v.m_result := (others => '0');
    shift(r.e_op1, shleft, shcnt, sari, shift_result, shlin, shrin, shl_out, shr_out);
    logic_op(aluop, r.e_op1, r.e_op2, logic_result, andi, ori);
    misc_op(aluop, r.e_op2, misc_result);
    alu_select(alusel, shift_result, logic_result, misc_result, v.m_result);
    
----------------------------------------------------------------------------
-- REGFILE STAGE
----------------------------------------------------------------------------
    op_mux(zero_v, srfo.data1, v, r, rsel1, v.e_op1);
    op_mux(imm, srfo.data2, v, r, rsel2, v.e_op2);
    
----------------------------------------------------------------------------
-- OUTPUT
----------------------------------------------------------------------------
    rin <= v;
    if swreg = '1' then
      wdata <= rfi.wdata;
    else
      wdata <= r.x_result;
    end if;
    shlout <= shl_out;
    shrout <= shr_out;
    rout <= r;
  
  end process;

  reg : process (clk)
  begin
    if rising_edge(clk) then
      if (holdn = '1' and smode = '1') then -- not holden and in secure mode
        r <= rin;
      end if;
      if rstn = '0' then
        r <= (others => (others=>'0'));
      end if; 
    end if;
  end process;

end;

